version: "3"

services:

  product-kafka-stream:
    image: product-kafka-stream:0.0.1-SNAPSHOT
    depends_on:
      - product-mongodb-consumer
      - product-mysql-producer
  
  product-mongodb-consumer:
    image: product-mongodb-consumer:0.0.1-SNAPSHOT
    ports:
      - "8081:8081"
    depends_on:
      - zookeeper
      - kafka
      - mongodb
  
  product-mysql-producer:
    image: product-mysql-producer:0.0.1-SNAPSHOT
    ports:
      - "8082:8082"
    depends_on:
      - zookeeper
      - kafka
      - mysql

  mysql:
    image: mysql:latest
    command: --innodb-use-native-aio=0
    tty: true
    restart: always
    ports:
      - "33600:3306"
    environment:
      - MYSQL_DATABASE=productdb
      - MYSQL_ROOT_PASSWORD=root
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    volumes:
      - ./data:/var/lib/mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    extra_hosts:
      - "host.docker.internal:172.17.0.1"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://kafka:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    extra_hosts:
      - "host.docker.internal:172.17.0.1"

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.0.1
    hostname: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_CONNECT_CLUSTER: http://app-connect:8083
      PORT: 9021
    extra_hosts:
      - "host.docker.internal:172.17.0.1"

  mongodb:
    image: mongo:4.4.4
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./.docker/dbdata:/data/db
      - ./.docker/mongo:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=productdb
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
  
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8085:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_AUTH_USERNAME=root
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=root
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=root
    depends_on:
      - mongodb
  
  tempo:
    image: grafana/tempo
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "9411:9411" # zipkin

  loki:
      image: grafana/loki
      extra_hosts: [ 'host.docker.internal:host-gateway' ]
      command: [ "-config.file=/etc/loki/local-config.yaml" ]
      ports:
        - "3100:3100"                                   # loki needs to be exposed so it receives logs
      environment:
        - JAEGER_AGENT_HOST=tempo
        - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
        - JAEGER_SAMPLER_TYPE=const
        - JAEGER_SAMPLER_PARAM=1

  prometheus:
      image: prom/prometheus
      extra_hosts: [ 'host.docker.internal:host-gateway' ]
      command:
        - --enable-feature=exemplar-storage
        - --config.file=/etc/prometheus/prometheus.yml
      volumes:
        - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      ports:
        - "9090:9090"

  grafana:
      image: grafana/grafana
      extra_hosts: [ 'host.docker.internal:host-gateway' ]
      volumes:
        - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
        - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      environment:
        - GF_AUTH_ANONYMOUS_ENABLED=true
        - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
        - GF_AUTH_DISABLE_LOGIN_FORM=true
      ports:
        - "3000:3000"
  # Prometheus: http://localhost:9090/
  # Grafana: http://localhost:3000/
